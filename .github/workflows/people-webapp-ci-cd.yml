name: CI/CD Pipeline

on:
  push:
    branches:
      - ci-cd

env:
  IMAGE_NAME: people.webapp
  ACR_NAME: peoplecli
  ACR_LOGIN_SERVER: peoplecli.azurecr.io
  RG_NAME: rg-aks-people
  CLUSTER_NAME: aks-people
  AKS_POOL_NODE_NAME: aks-people-agentpool

jobs:
  build-and-push-docker-image:
    runs-on: ubuntu-24.04

    outputs:
      fq_image_name: ${{ steps.build-image.outputs.FQ_IMAGE_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
 
      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        run: az acr login -n $ACR_NAME

      - name: Count existing tags and configure the image tag
        run: |
          COUNT=$(az acr repository show-tags -n $ACR_NAME --repository $IMAGE_NAME -o tsv | wc -l)
          IMAGE_TAG=v$(expr $COUNT + 1)
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build-image
        run: |
          FQ_IMAGE_NAME=$ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG
          echo "FQ_IMAGE_NAME=$FQ_IMAGE_NAME" >> $GITHUB_ENV
          echo "FQ_IMAGE_NAME=$FQ_IMAGE_NAME" >> $GITHUB_OUTPUT
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            -t $FQ_IMAGE_NAME \
            --push .

      - name: Logout from Azure Container Registry
        run: docker logout $ACR_LOGIN_SERVER
        
  deploy-to-aks:
    runs-on: ubuntu-24.04
    needs: build-and-push-docker-image

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
 
      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Configure Kubernetes context
        run: az aks get-credentials -g $RG_NAME -n $CLUSTER_NAME
        
      - name: Configure Kubernetes Manifest
        env:
          FQ_IMAGE_NAME: ${{ needs.build-and-push-docker-image.outputs.fq_image_name }}
        run: |
          MANAGED_CLIENT_ID=$(az identity list --query "[?contains(name, '$AKS_POOL_NODE_NAME')].clientId" -o tsv)
          sed -i "s|<FQ_IMAGE_NAME>|$FQ_IMAGE_NAME|g" ./aks/deployment.yml
          sed -i "s|<MANAGED_CLIENT_ID>|$MANAGED_CLIENT_ID|g" ./aks/deployment.yml
          cat ./aks/deployment.yml
          
      - name: Update Deployment
        run: kubectl apply -f ./aks/deployment.yml
